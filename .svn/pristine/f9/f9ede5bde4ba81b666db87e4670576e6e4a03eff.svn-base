//
//  YDTool.m
//  YDCalculateTool
//
//  Created by ios on 16/6/7.
//  Copyright © 2016年 ios. All rights reserved.
//

#import "YDTool.h"
#import "YDCustCellModel.h"

@implementation YDTool


+ (NSString *)arrayToStringWithArray:(NSArray *)arr{
    
    if (arr == nil) {
        return @"";
    }
    
    NSError *error = nil;
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:arr
                                                       options:NSJSONWritingPrettyPrinted
                                                         error:&error];
    NSString *jsonString = [[NSString alloc] initWithData:jsonData
                                                 encoding:NSUTF8StringEncoding];
    
    jsonString = [jsonString stringByReplacingOccurrencesOfString:@"\n" withString:@""];
    jsonString = [jsonString stringByReplacingOccurrencesOfString:@" " withString:@""];

    
    return jsonString;
}

+ (NSString *)arrayToStringWithDic:(NSDictionary *)dic{
    
    if (dic == nil) {
        return @"";
    }
    NSError *error = nil;
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dic
                                                       options:NSJSONWritingPrettyPrinted
                                                         error:&error];
    NSString *jsonString = [[NSString alloc] initWithData:jsonData
                                                 encoding:NSUTF8StringEncoding];
    
    jsonString = [jsonString stringByReplacingOccurrencesOfString:@"\n" withString:@""];
    jsonString = [jsonString stringByReplacingOccurrencesOfString:@" " withString:@""];
    
    
    return jsonString;
}


/**
 *  判断手机号码格式是否正确
 */
+ (BOOL)valiMobile:(NSString *)mobile
{
    mobile = [mobile stringByReplacingOccurrencesOfString:@" " withString:@""];
    if (mobile.length != 11)
    {
        return NO;
    }else{
        /**
         * 移动号段正则表达式
         */
        NSString *CM_NUM = @"^((13[4-9])|(147)|(15[0-2,7-9])|(178)|(18[2-4,7-8]))\\d{8}|(1705)\\d{7}$";
        /**
         * 联通号段正则表达式
         */
        NSString *CU_NUM = @"^((13[0-2])|(145)|(15[5-6])|(176)|(18[5,6]))\\d{8}|(1709)\\d{7}$";
        /**
         * 电信号段正则表达式
         */
        NSString *CT_NUM = @"^((133)|(153)|(177)|(18[0,1,9]))\\d{8}$";
        NSPredicate *pred1 = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CM_NUM];
        BOOL isMatch1 = [pred1 evaluateWithObject:mobile];
        NSPredicate *pred2 = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CU_NUM];
        BOOL isMatch2 = [pred2 evaluateWithObject:mobile];
        NSPredicate *pred3 = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CT_NUM];
        BOOL isMatch3 = [pred3 evaluateWithObject:mobile];
        
        if (isMatch1 || isMatch2 || isMatch3) {
            return YES;
        }else{
            return NO;
        }
    }
}

+ (NSArray *)cellModelArrayWithCellName:(NSString *)cellName
{

    NSString *pathString = [[NSBundle mainBundle] pathForResource:@"CustomerCell" ofType:@"plist"];
    NSDictionary *cellDict = [NSDictionary dictionaryWithContentsOfFile:pathString];
    
    //tebleview 每组
    NSArray *groupArray = [cellDict objectForKey:cellName];
    
    NSMutableArray *dataArray = [NSMutableArray array];
    for (NSArray *cellArray in groupArray) {
        NSMutableArray *groupCellArray = [NSMutableArray array];
        for (NSDictionary *cellDic in cellArray) {
            YDCustCellModel *cellModel = [YDCustCellModel cellModelWithDict:cellDic];
            [groupCellArray addObject:cellModel];
        }
        [dataArray addObject:groupCellArray];
    }
    
    return dataArray;
}

+ (NSArray *)cellModelWithCellName:(NSString *)cellName
{
    NSString *pathString = [[NSBundle mainBundle] pathForResource:@"CustomerCell" ofType:@"plist"];
    NSDictionary *cellDict = [NSDictionary dictionaryWithContentsOfFile:pathString];
    //tebleview 每组
    NSArray *cellArray = [cellDict objectForKey:cellName];
    
    NSMutableArray *dataArray = [NSMutableArray array];
    for (NSDictionary *cellDic in cellArray) {
        YDCustCellModel *cellModel = [YDCustCellModel cellModelWithDict:cellDic];
        [dataArray addObject:cellModel];
    }
    
    return dataArray;
}

#pragma mark - 获取用户的通讯录权限
+ (void)CheckAddressBookAuthorization:(void (^)(bool isAuthorized))block
{
    ABAddressBookRef addressBook = ABAddressBookCreateWithOptions(NULL, NULL);
    ABAuthorizationStatus authStatus = ABAddressBookGetAuthorizationStatus();
    
    if (authStatus != kABAuthorizationStatusAuthorized)
    {
        ABAddressBookRequestAccessWithCompletion(addressBook, ^(bool granted, CFErrorRef error)
                                                 {
                                                     dispatch_async(dispatch_get_main_queue(), ^{
                                                         if (error)
                                                         {
                                                             NSLog(@"Error: %@", (__bridge NSError *)error);
                                                         }
                                                         else if (!granted)
                                                         {
                                                             
                                                             block(NO);
                                                         }
                                                         else
                                                         {
                                                             block(YES);
                                                         }
                                                     });
                                                 });
    }
    else
    {
        block(YES);
    }
    
}


@end
